<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>de.innovativeoperation.taskscheduler</groupId>
		<artifactId>IOTaskScheduler</artifactId>
		<version>1.0.3</version>
	</parent>
	<artifactId>IOTaskSchedulerSystemPerformanceTest</artifactId>


	<properties>
		<host.protocol>http</host.protocol>
		<host.name>localhost</host.name>
		<host.port>55555</host.port>
		<host.path>/IOTaskSchedulerWebAppTest</host.path>
	</properties>


	<build>
		<plugins>
			<plugin>
				<groupId>com.lazerycode.jmeter</groupId>
				<artifactId>jmeter-maven-plugin</artifactId>
				<version>1.9.0</version>
				<executions>
					<execution>
						<id>jmeter-tests</id>
						<phase>verify</phase>
						<goals>
							<goal>jmeter</goal>
						</goals>
						<configuration>
							<propertiesUser>
								<host.protocol>${host.protocol}</host.protocol>
								<host.name>${host.name}</host.name>
								<host.port>${host.port}</host.port>
								<host.path>${host.path}</host.path>
							</propertiesUser>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>com.lazerycode.jmeter</groupId>
				<artifactId>jmeter-analysis-maven-plugin</artifactId>
				<executions>
					<execution>

						<goals>
							<goal>analyze</goal>
						</goals>
						<phase>install</phase>
						<configuration>
							<!-- An AntPath-Style pattern matching a JMeter XML result file to 
								analyze. Must be a fully qualified path. File may be GZiped, must end in 
								.gz then. Default: not set. Required. -->
							<source>${project.build.directory}/**/*.jtl</source>

							<!-- directory where to store analysis result files. Default: ${project.build.directory} 
								Required. -->
							<targetDirectory>${project.build.directory}/results</targetDirectory>

							<!-- Request groups as a mapping from "group name" to "ant pattern". 
								A request uri that matches an ant pattern will be associated with the group 
								name. Request details, charts and CSV files are generated per requestGroup. 
								The order is honored, a sample will be added to the first matching pattern. 
								So it's possible to define various patterns and one catch all pattern. If 
								not set, the threadgroup name of the request will be used. Default: not set. -->
							<requestGroups>
								<pages>/page/**</pages>
								<binaries>/binary/**</binaries>
							</requestGroups>
							<requestGroups>
								<requestGroup>
									<name>pages</name>
									<pattern>/page/**</pattern>
								</requestGroup>
								<requestGroup>
									<name>binaries</name>
									<pattern>/binary/**</pattern>
								</requestGroup>
							</requestGroups>

							<!-- If set to true, additional files "<category>-sizes.csv" and "<category>-durations.csv" 
								will be stored. These files contain detailed information for response size 
								and response durations for every URI. Default: true -->
							<generateCSVs>true</generateCSVs>

							<!-- If set to true, additional chart files "<category>-durations.png" 
								will be created. Default: true -->
							<generateCharts>true</generateCharts>

							<!-- If set to true, the directory structure relative to source will 
								be preserved during output. Default: false -->
							<preserveDirectories>false</preserveDirectories>

							<!-- Set<String> of sample names that should be processed when analysing 
								a results file. Default: sample, httpSample -->
							<sampleNames>
								<sampleName>sample</sampleName>
								<sampleName>httpSample</sampleName>
							</sampleNames>

							<!-- If set to true will process all files found by the pattern defined 
								in <source>. If set to false (the default) it will only process the first 
								file found. *SETTING TO TRUE IS NOT RECOMMENDED* It can substantially impact 
								performance, if you do this you do it at your own risk! Default: false -->
							<processAllFilesFound>false</processAllFilesFound>

							<!-- Template directory where custom freemarker templates are stored. 
								Freemarker templates are used for all generated output. (CSV files, HTML 
								files, console output) Templates must be stored in one of the following three 
								subfolders of the templateDirectory: csv, html, text The entry template must 
								be called "main.ftl". For example, templateDirectory/text/main.ftl will be 
								used for generating the console output. Default: not set. -->
							<templateDirectory>${project.basedir}/src/main/resources/</templateDirectory>

							<!-- Mapping from resource URL to file name. Every resource will be 
								downloaded and stored in 'targetDirectory' with the given filename. Tokens 
								"_FROM_" and "_TO_" can be used as placeholders. These placeholders will 
								be replaced by timestamps of execution interval (formatted as ISO8601, e.g. 
								'20111216T145509+0100'). Default: not set. <remoteResources> <property> <name>http://yourhost/path?from=_FROM_&amp;to=_TO_</name> 
								<value>my_resource.txt</value> </property> </remoteResources> -->
							<!-- Specify custom date format for resources not supporting ISO8601. 
								Default IOS8601 -->
							<remoteResourcesFromUntilDateFormat>HH:mm_yyyyMMdd</remoteResourcesFromUntilDateFormat>

							<!-- List of writers that handle all output of the plugin. Defaults 
								to: * com.lazerycode.jmeter.analyzer.writer.ChartWriter (generates detailed 
								charts as PNGs), * com.lazerycode.jmeter.analyzer.writer.DetailsToCsvWriter 
								(generates CSV files for every request group), * com.lazerycode.jmeter.analyzer.writer.DetailsToHtmlWriter 
								(generates HTML files for every request group), * com.lazerycode.jmeter.analyzer.writer.HtmlWriter 
								(generates an HTML overview file), * com.lazerycode.jmeter.analyzer.writer.SummaryTextToFileWriter 
								(generates a TXT overview file), * com.lazerycode.jmeter.analyzer.writer.SummaryTextToStdOutWriter 
								(generates overview output to stdout) If one of those should be deactivated 
								or a new com.lazerycode.jmeter.analyzer.writer.Writer implementation should 
								be added, all desired writers need to be configured! -->
							<!--<writers> -->
							<!--<com.lazerycode.jmeter.analyzer.writer.SummaryTextToStdOutWriter/> -->
							<!--<com.lazerycode.jmeter.analyzer.writer.SummaryTextToFileWriter/> -->
							<!--<com.lazerycode.jmeter.analyzer.writer.HtmlWriter/> -->
							<!--<com.lazerycode.jmeter.analyzer.writer.DetailsToCsvWriter/> -->
							<!--<com.lazerycode.jmeter.analyzer.writer.DetailsToHtmlWriter/> -->
							<!--<com.lazerycode.jmeter.analyzer.writer.ChartWriter/> -->
							<!--</writers> -->

						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>
</project>